#include <iostream>#include <string>#include <sstream>#include <exception>using namespace std;class BadItemException : public runtime_error{    private:      double  m_badPrice ;    public:      BadItemException(string & errDesc) : runtime_error(errDesc), m_badPrice(0.0)      {      }      BadItemException(string & errDesc, double price) :             runtime_error(errDesc), m_badPrice(price)      {      }      double getBadPrice()      {            return m_badPrice ;      }};class NegativePriceException : public BadItemException{    public:      NegativePriceException() : BadItemException(string("Bad price"))      {      }};class ZeroLengthException : public BadItemException{    public:      ZeroLengthException() : BadItemException(string("Bad length"))      {      }};class Item{    private:       double m_price ;       string m_desc ;    public:       Item(double price, string desc) : m_price(price), m_desc(desc)       {          if (price < 0.0)          {            // string errMsg = "Uh no. You cannot set the price to be negative";            // throw new BadItemException(errMsg, price) ;            throw new NegativePriceException() ;          }          else if (desc.length() == 0)
          {             // string errMsg = "Description cannot be empty.";             // throw new BadItemException(errMsg) ;                throw new ZeroLengthException() ;                  }       }       string toString()       {           stringstream ss ;           ss << "$" << m_price << " DESC: " << m_desc ;           return ss.str() ;       }};int main(){    try    {      double price ;      cout << "Please enter a price: " ;      cin >> price ;      cin.ignore(1024, '\n');      string desc ;      cout << "Please enter a description: " ;      getline(cin, desc) ;      Item item1(price, desc) ;      cout << item1.toString() << endl;    }    catch(BadItemException *pItemErr)    {      cout << "Bad item error occurs" << endl ;      cout << pItemErr->what() << endl ;      cout << "You have entered this price: " << pItemErr->getBadPrice() << endl;      throw pItemErr ;  // recreate and continue with the error exception    }    catch( ... )    {      cout << "Catching all other unexpected errors " << endl;      cout << "Similar to the ELSE part. It will match all data types." << endl;    }    return 0 ;}